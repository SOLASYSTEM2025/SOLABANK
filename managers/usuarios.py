class UsuarioManager:
    """
    üë• GERENCIADOR DE USU√ÅRIOS
    
    Esta classe √© respons√°vel por tudo relacionado aos usu√°rios:
    - Cadastro e login
    - Controle de saldo e pontos
    - Hist√≥rico de transa√ß√µes
    - Opera√ß√µes banc√°rias b√°sicas
    
    √â como o "departamento de contas" do banco.
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR
        
        Quando criamos um UsuarioManager, ele automaticamente:
        - Define onde salvar os dados dos usu√°rios (arquivo JSON)
        - Carrega os usu√°rios j√° cadastrados
        """
        self.arquivo_usuarios = "data/usuarios.json"
        self.usuarios = self.carregar_usuarios()
    
    def carregar_usuarios(self):
        """
        üìÇ CARREGAR USU√ÅRIOS DO ARQUIVO
        
        Esta fun√ß√£o l√™ o arquivo JSON onde est√£o salvos todos os usu√°rios.
        Se o arquivo n√£o existir ou estiver corrompido, retorna um dicion√°rio vazio.
        """
        if os.path.exists(self.arquivo_usuarios):
            try:
                with open(self.arquivo_usuarios, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                # Se der erro ao ler o arquivo, retorna dicion√°rio vazio
                return {}
        return {}
    
    def salvar_usuarios(self):
        """
        üíæ SALVAR USU√ÅRIOS NO ARQUIVO
        
        Esta fun√ß√£o salva todos os dados dos usu√°rios no arquivo JSON.
        √â chamada sempre que algum dado √© alterado (saldo, hist√≥rico, etc.).
        """
        with open(self.arquivo_usuarios, 'w', encoding='utf-8') as f:
            json.dump(self.usuarios, f, indent=2, ensure_ascii=False)
    
    def cadastrar(self):
        """
        üìù CADASTRAR NOVO USU√ÅRIO
        
        Esta fun√ß√£o permite que uma nova pessoa se cadastre no sistema.
        Ela pede: nome de usu√°rio, senha, pergunta secreta e resposta.
        A pergunta secreta serve para recuperar a senha se esquecer.
        """
        print("\nüìù CADASTRO DE USU√ÅRIO")
        
        # Pede o nome de usu√°rio
        usuario = input("üë§ Nome de usu√°rio: ").strip()
        if not usuario or usuario in self.usuarios:
            print("‚ùå Usu√°rio inv√°lido ou j√° existe!")
            pausar()
            return False
        
        # Pede a senha
        senha = input("üîí Senha: ").strip()
        if not senha:
            print("‚ùå Senha n√£o pode estar vazia!")
            pausar()
            return False
        
        # Pede pergunta e resposta secreta para recupera√ß√£o de senha
        pergunta = input("‚ùì Pergunta secreta: ").strip()
        resposta = input("üí¨ Resposta secreta: ").strip()
        
        # Cria o registro do usu√°rio com todos os dados iniciais
        self.usuarios[usuario] = {
            "senha": senha,
            "pergunta_secreta": pergunta,
            "resposta_secreta": resposta,
            "saldo": 0.0,                    # Come√ßa com saldo zero
            "pontos": 0,                     # Come√ßa sem pontos
            "historico": [],                 # Lista vazia de transa√ß√µes
            "data_cadastro": datetime.now().isoformat()  # Data de quando se cadastrou
        }
        
        self.salvar_usuarios()  # Salva no arquivo
        return True
    
    def login(self):
        """
        üë§ FAZER LOGIN
        
        Esta fun√ß√£o permite que um usu√°rio j√° cadastrado entre no sistema.
        Se errar a senha, pode tentar responder a pergunta secreta.
        """
        print("\nüë§ LOGIN")
        
        # Pede o nome de usu√°rio
        usuario = input("üë§ Usu√°rio: ").strip()
        if usuario not in self.usuarios:
            print("‚ùå Usu√°rio n√£o encontrado!")
            pausar()
            return None
        
        # Pede a senha
        senha = input("üîí Senha: ").strip()
        if self.usuarios[usuario]["senha"] != senha:
            print("‚ùå Senha incorreta!")
            
            # Se errou a senha, oferece a pergunta secreta como alternativa
            print(f"\n‚ùì {self.usuarios[usuario]['pergunta_secreta']}")
            resposta = input("üí¨ Resposta: ").strip()
            
            # Compara as respostas (ignora mai√∫sculas/min√∫sculas)
            if self.usuarios[usuario]["resposta_secreta"].lower() != resposta.lower():
                print("‚ùå Resposta incorreta!")
                pausar()
                return None
        
        print("‚úÖ Login realizado com sucesso!")
        pausar()
        return usuario  # Retorna o nome do usu√°rio logado
    
    def get_saldo(self, usuario):
        """
        üí∞ CONSULTAR SALDO
        
        Esta fun√ß√£o retorna quanto dinheiro o usu√°rio tem na conta.
        """
        return self.usuarios[usuario]["saldo"]
    
    def get_pontos(self, usuario):
        """
        ‚≠ê CONSULTAR PONTOS
        
        Esta fun√ß√£o retorna quantos pontos de recompensa o usu√°rio tem.
        Os pontos s√£o ganhos fazendo compras no cart√£o de cr√©dito.
        """
        return self.usuarios[usuario].get("pontos", 0)
    
    def adicionar_pontos(self, usuario, pontos):
        """
        ‚≠ê ADICIONAR PONTOS
        
        Esta fun√ß√£o adiciona pontos de recompensa ao usu√°rio.
        √â chamada quando ele faz compras no cart√£o de cr√©dito.
        """
        if "pontos" not in self.usuarios[usuario]:
            self.usuarios[usuario]["pontos"] = 0
        self.usuarios[usuario]["pontos"] += pontos
        self.salvar_usuarios()
    
    def remover_pontos(self, usuario, pontos):
        """
        ‚≠ê REMOVER PONTOS
        
        Esta fun√ß√£o remove pontos do usu√°rio (quando ele troca por dinheiro).
        Garante que os pontos nunca fiquem negativos.
        """
        if "pontos" not in self.usuarios[usuario]:
            self.usuarios[usuario]["pontos"] = 0
        self.usuarios[usuario]["pontos"] = max(0, self.usuarios[usuario]["pontos"] - pontos)
        self.salvar_usuarios()
    
    def depositar(self, usuario, valor):
        """
        üí∞ FAZER DEP√ìSITO
        
        Esta fun√ß√£o adiciona dinheiro na conta do usu√°rio.
        √â como colocar dinheiro no banco.
        """
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        self.usuarios[usuario]["saldo"] += valor
        self.adicionar_historico(usuario, f"DEP√ìSITO: +R$ {valor:.2f}")
        self.salvar_usuarios()
        return True
    
    def sacar(self, usuario, valor):
        """
        üí∏ FAZER SAQUE
        
        Esta fun√ß√£o remove dinheiro da conta do usu√°rio.
        S√≥ funciona se ele tiver saldo suficiente.
        """
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        if self.usuarios[usuario]["saldo"] < valor:
            print("‚ùå Saldo insuficiente!")
            return False
        
        self.usuarios[usuario]["saldo"] -= valor
        self.adicionar_historico(usuario, f"SAQUE: -R$ {valor:.2f}")
        self.salvar_usuarios()
        return True
    
    def transferir(self, origem, destino, valor):
        """
        üîÑ FAZER TRANSFER√äNCIA
        
        Esta fun√ß√£o transfere dinheiro de um usu√°rio para outro.
        Remove dinheiro da conta de origem e adiciona na conta de destino.
        """
        if destino not in self.usuarios:
            print("‚ùå Usu√°rio de destino n√£o encontrado!")
            return False
        
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        if self.usuarios[origem]["saldo"] < valor:
            print("‚ùå Saldo insuficiente!")
            return False
        
        # Remove da conta de origem
        self.usuarios[origem]["saldo"] -= valor
        # Adiciona na conta de destino
        self.usuarios[destino]["saldo"] += valor
        
        # Registra no hist√≥rico de ambos os usu√°rios
        self.adicionar_historico(origem, f"TRANSFER√äNCIA ENVIADA para {destino}: -R$ {valor:.2f}")
        self.adicionar_historico(destino, f"TRANSFER√äNCIA RECEBIDA de {origem}: +R$ {valor:.2f}")
        
        self.salvar_usuarios()
        return True
    
    def adicionar_historico(self, usuario, transacao):
        """
        üìä ADICIONAR AO HIST√ìRICO
        
        Esta fun√ß√£o registra uma transa√ß√£o no hist√≥rico do usu√°rio.
        Cada registro inclui data, hora e descri√ß√£o da opera√ß√£o.
        """
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        self.usuarios[usuario]["historico"].append(f"[{timestamp}] {transacao}")
        self.salvar_usuarios()
    
    def mostrar_historico(self, usuario):
        """
        üìä MOSTRAR HIST√ìRICO
        
        Esta fun√ß√£o exibe as √∫ltimas 20 transa√ß√µes do usu√°rio.
        √â como um "extrato banc√°rio".
        """
        print(f"\nüìä HIST√ìRICO - {usuario}")
        historico = self.usuarios[usuario]["historico"]
        
        if not historico:
            print("üìù Nenhuma transa√ß√£o encontrada.")
            return
        
        # Mostra apenas as √∫ltimas 20 transa√ß√µes
        for transacao in historico[-20:]:
            print(transacao)
    
    def exportar_historico(self, usuario):
        """
        üìÑ EXPORTAR HIST√ìRICO
        
        Esta fun√ß√£o salva o hist√≥rico completo do usu√°rio em um arquivo de texto.
        O arquivo √© salvo com data e hora no nome para n√£o sobrescrever.
        """
        historico = self.usuarios[usuario]["historico"]
        nome_arquivo = f"historico_{usuario}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        try:
            with open(nome_arquivo, 'w', encoding='utf-8') as f:
                f.write(f"HIST√ìRICO DE TRANSA√á√ïES - {usuario}\n")
                f.write("=" * 50 + "\n\n")
                
                for transacao in historico:
                    f.write(transacao + "\n")
            
            print(f"‚úÖ Hist√≥rico exportado para: {nome_arquivo}")
        except Exception as e:
            print(f"‚ùå Erro ao exportar: {e}")
    
    def get_todos_usuarios(self):
        """
        üë• OBTER TODOS OS USU√ÅRIOS
        
        Esta fun√ß√£o retorna o dicion√°rio com todos os usu√°rios.
        √â usada principalmente pelo painel administrativo.
        """
        return self.usuarios

# ============================================================================
# CLASSE GERENCIADOR DE CART√ïES
# ============================================================================
