"""
                üè¶ SOLABANK
=============================================
"""

import json
import os
import csv
from datetime import datetime, timedelta
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import random

# ============================================================================
# FUN√á√ïES UTILIT√ÅRIAS
# ============================================================================

def limpar_tela():
    """
    üßπ LIMPAR TELA
    
    Esta fun√ß√£o limpa a tela do terminal para deixar a interface mais limpa.
    Funciona tanto no Windows (cls) quanto no Linux/Mac (clear).
    """
    os.system('cls' if os.name == 'nt' else 'clear')

def pausar():
    """
    ‚è∏Ô∏è PAUSAR EXECU√á√ÉO
    
    Esta fun√ß√£o pausa o programa e espera o usu√°rio pressionar Enter.
    √â √∫til para dar tempo do usu√°rio ler as mensagens antes de continuar.
    """
    input("\nPressione Enter para continuar...")

def validar_cpf(cpf):
    """
    üìã VALIDAR CPF
    
    Esta fun√ß√£o verifica se um CPF tem o formato correto (11 d√≠gitos).
    √â uma valida√ß√£o b√°sica, n√£o verifica os d√≠gitos verificadores.
    """
    cpf = cpf.replace(".", "").replace("-", "")  # Remove pontos e tra√ßos
    return len(cpf) == 11 and cpf.isdigit()     # Verifica se tem 11 d√≠gitos

def formatar_moeda(valor):
    """
    üí∞ FORMATAR MOEDA
    
    Esta fun√ß√£o formata um n√∫mero para aparecer como dinheiro brasileiro.
    Exemplo: 1234.56 vira "R$ 1.234,56"
    """
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def gerar_numero_cartao():
    """
    üí≥ GERAR N√öMERO DE CART√ÉO
    
    Esta fun√ß√£o gera um n√∫mero de cart√£o de cr√©dito fict√≠cio.
    Come√ßa com 4000 (padr√£o Visa) e adiciona 12 d√≠gitos aleat√≥rios.
    """
    return "4000" + "".join([str(random.randint(0, 9)) for _ in range(12)])

# ============================================================================
# CLASSE GERENCIADOR DE USU√ÅRIOS
# ============================================================================

class UsuarioManager:
    """
    üë• GERENCIADOR DE USU√ÅRIOS
    
    Esta classe √© respons√°vel por tudo relacionado aos usu√°rios:
    - Cadastro e login
    - Controle de saldo e pontos
    - Hist√≥rico de transa√ß√µes
    - Opera√ß√µes banc√°rias b√°sicas
    
    √â como o "departamento de contas" do banco.
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR
        
        Quando criamos um UsuarioManager, ele automaticamente:
        - Define onde salvar os dados dos usu√°rios (arquivo JSON)
        - Carrega os usu√°rios j√° cadastrados
        """
        self.arquivo_usuarios = "usuarios.json"
        self.usuarios = self.carregar_usuarios()
    
    def carregar_usuarios(self):
        """
        üìÇ CARREGAR USU√ÅRIOS DO ARQUIVO
        
        Esta fun√ß√£o l√™ o arquivo JSON onde est√£o salvos todos os usu√°rios.
        Se o arquivo n√£o existir ou estiver corrompido, retorna um dicion√°rio vazio.
        """
        if os.path.exists(self.arquivo_usuarios):
            try:
                with open(self.arquivo_usuarios, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                # Se der erro ao ler o arquivo, retorna dicion√°rio vazio
                return {}
        return {}
    
    def salvar_usuarios(self):
        """
        üíæ SALVAR USU√ÅRIOS NO ARQUIVO
        
        Esta fun√ß√£o salva todos os dados dos usu√°rios no arquivo JSON.
        √â chamada sempre que algum dado √© alterado (saldo, hist√≥rico, etc.).
        """
        with open(self.arquivo_usuarios, 'w', encoding='utf-8') as f:
            json.dump(self.usuarios, f, indent=2, ensure_ascii=False)
    
    def cadastrar(self):
        """
        üìù CADASTRAR NOVO USU√ÅRIO
        
        Esta fun√ß√£o permite que uma nova pessoa se cadastre no sistema.
        Ela pede: nome de usu√°rio, senha, pergunta secreta e resposta.
        A pergunta secreta serve para recuperar a senha se esquecer.
        """
        print("\nüìù CADASTRO DE USU√ÅRIO")
        
        # Pede o nome de usu√°rio
        usuario = input("üë§ Nome de usu√°rio: ").strip()
        if not usuario or usuario in self.usuarios:
            print("‚ùå Usu√°rio inv√°lido ou j√° existe!")
            pausar()
            return False
        
        # Pede a senha
        senha = input("üîí Senha: ").strip()
        if not senha:
            print("‚ùå Senha n√£o pode estar vazia!")
            pausar()
            return False
        
        # Pede pergunta e resposta secreta para recupera√ß√£o de senha
        pergunta = input("‚ùì Pergunta secreta: ").strip()
        resposta = input("üí¨ Resposta secreta: ").strip()
        
        # Cria o registro do usu√°rio com todos os dados iniciais
        self.usuarios[usuario] = {
            "senha": senha,
            "pergunta_secreta": pergunta,
            "resposta_secreta": resposta,
            "saldo": 0.0,                    # Come√ßa com saldo zero
            "pontos": 0,                     # Come√ßa sem pontos
            "historico": [],                 # Lista vazia de transa√ß√µes
            "data_cadastro": datetime.now().isoformat()  # Data de quando se cadastrou
        }
        
        self.salvar_usuarios()  # Salva no arquivo
        return True
    
    def login(self):
        """
        üë§ FAZER LOGIN
        
        Esta fun√ß√£o permite que um usu√°rio j√° cadastrado entre no sistema.
        Se errar a senha, pode tentar responder a pergunta secreta.
        """
        print("\nüë§ LOGIN")
        
        # Pede o nome de usu√°rio
        usuario = input("üë§ Usu√°rio: ").strip()
        if usuario not in self.usuarios:
            print("‚ùå Usu√°rio n√£o encontrado!")
            pausar()
            return None
        
        # Pede a senha
        senha = input("üîí Senha: ").strip()
        if self.usuarios[usuario]["senha"] != senha:
            print("‚ùå Senha incorreta!")
            
            # Se errou a senha, oferece a pergunta secreta como alternativa
            print(f"\n‚ùì {self.usuarios[usuario]['pergunta_secreta']}")
            resposta = input("üí¨ Resposta: ").strip()
            
            # Compara as respostas (ignora mai√∫sculas/min√∫sculas)
            if self.usuarios[usuario]["resposta_secreta"].lower() != resposta.lower():
                print("‚ùå Resposta incorreta!")
                pausar()
                return None
        
        print("‚úÖ Login realizado com sucesso!")
        pausar()
        return usuario  # Retorna o nome do usu√°rio logado
    
    def get_saldo(self, usuario):
        """
        üí∞ CONSULTAR SALDO
        
        Esta fun√ß√£o retorna quanto dinheiro o usu√°rio tem na conta.
        """
        return self.usuarios[usuario]["saldo"]
    
    def get_pontos(self, usuario):
        """
        ‚≠ê CONSULTAR PONTOS
        
        Esta fun√ß√£o retorna quantos pontos de recompensa o usu√°rio tem.
        Os pontos s√£o ganhos fazendo compras no cart√£o de cr√©dito.
        """
        return self.usuarios[usuario].get("pontos", 0)
    
    def adicionar_pontos(self, usuario, pontos):
        """
        ‚≠ê ADICIONAR PONTOS
        
        Esta fun√ß√£o adiciona pontos de recompensa ao usu√°rio.
        √â chamada quando ele faz compras no cart√£o de cr√©dito.
        """
        if "pontos" not in self.usuarios[usuario]:
            self.usuarios[usuario]["pontos"] = 0
        self.usuarios[usuario]["pontos"] += pontos
        self.salvar_usuarios()
    
    def remover_pontos(self, usuario, pontos):
        """
        ‚≠ê REMOVER PONTOS
        
        Esta fun√ß√£o remove pontos do usu√°rio (quando ele troca por dinheiro).
        Garante que os pontos nunca fiquem negativos.
        """
        if "pontos" not in self.usuarios[usuario]:
            self.usuarios[usuario]["pontos"] = 0
        self.usuarios[usuario]["pontos"] = max(0, self.usuarios[usuario]["pontos"] - pontos)
        self.salvar_usuarios()
    
    def depositar(self, usuario, valor):
        """
        üí∞ FAZER DEP√ìSITO
        
        Esta fun√ß√£o adiciona dinheiro na conta do usu√°rio.
        √â como colocar dinheiro no banco.
        """
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        self.usuarios[usuario]["saldo"] += valor
        self.adicionar_historico(usuario, f"DEP√ìSITO: +R$ {valor:.2f}")
        self.salvar_usuarios()
        return True
    
    def sacar(self, usuario, valor):
        """
        üí∏ FAZER SAQUE
        
        Esta fun√ß√£o remove dinheiro da conta do usu√°rio.
        S√≥ funciona se ele tiver saldo suficiente.
        """
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        if self.usuarios[usuario]["saldo"] < valor:
            print("‚ùå Saldo insuficiente!")
            return False
        
        self.usuarios[usuario]["saldo"] -= valor
        self.adicionar_historico(usuario, f"SAQUE: -R$ {valor:.2f}")
        self.salvar_usuarios()
        return True
    
    def transferir(self, origem, destino, valor):
        """
        üîÑ FAZER TRANSFER√äNCIA
        
        Esta fun√ß√£o transfere dinheiro de um usu√°rio para outro.
        Remove dinheiro da conta de origem e adiciona na conta de destino.
        """
        if destino not in self.usuarios:
            print("‚ùå Usu√°rio de destino n√£o encontrado!")
            return False
        
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        if self.usuarios[origem]["saldo"] < valor:
            print("‚ùå Saldo insuficiente!")
            return False
        
        # Remove da conta de origem
        self.usuarios[origem]["saldo"] -= valor
        # Adiciona na conta de destino
        self.usuarios[destino]["saldo"] += valor
        
        # Registra no hist√≥rico de ambos os usu√°rios
        self.adicionar_historico(origem, f"TRANSFER√äNCIA ENVIADA para {destino}: -R$ {valor:.2f}")
        self.adicionar_historico(destino, f"TRANSFER√äNCIA RECEBIDA de {origem}: +R$ {valor:.2f}")
        
        self.salvar_usuarios()
        return True
    
    def adicionar_historico(self, usuario, transacao):
        """
        üìä ADICIONAR AO HIST√ìRICO
        
        Esta fun√ß√£o registra uma transa√ß√£o no hist√≥rico do usu√°rio.
        Cada registro inclui data, hora e descri√ß√£o da opera√ß√£o.
        """
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        self.usuarios[usuario]["historico"].append(f"[{timestamp}] {transacao}")
        self.salvar_usuarios()
    
    def mostrar_historico(self, usuario):
        """
        üìä MOSTRAR HIST√ìRICO
        
        Esta fun√ß√£o exibe as √∫ltimas 20 transa√ß√µes do usu√°rio.
        √â como um "extrato banc√°rio".
        """
        print(f"\nüìä HIST√ìRICO - {usuario}")
        historico = self.usuarios[usuario]["historico"]
        
        if not historico:
            print("üìù Nenhuma transa√ß√£o encontrada.")
            return
        
        # Mostra apenas as √∫ltimas 20 transa√ß√µes
        for transacao in historico[-20:]:
            print(transacao)
    
    def exportar_historico(self, usuario):
        """
        üìÑ EXPORTAR HIST√ìRICO
        
        Esta fun√ß√£o salva o hist√≥rico completo do usu√°rio em um arquivo de texto.
        O arquivo √© salvo com data e hora no nome para n√£o sobrescrever.
        """
        historico = self.usuarios[usuario]["historico"]
        nome_arquivo = f"historico_{usuario}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        try:
            with open(nome_arquivo, 'w', encoding='utf-8') as f:
                f.write(f"HIST√ìRICO DE TRANSA√á√ïES - {usuario}\n")
                f.write("=" * 50 + "\n\n")
                
                for transacao in historico:
                    f.write(transacao + "\n")
            
            print(f"‚úÖ Hist√≥rico exportado para: {nome_arquivo}")
        except Exception as e:
            print(f"‚ùå Erro ao exportar: {e}")
    
    def get_todos_usuarios(self):
        """
        üë• OBTER TODOS OS USU√ÅRIOS
        
        Esta fun√ß√£o retorna o dicion√°rio com todos os usu√°rios.
        √â usada principalmente pelo painel administrativo.
        """
        return self.usuarios

# ============================================================================
# CLASSE GERENCIADOR DE CART√ïES
# ============================================================================

class CartaoManager:
    """
    üí≥ GERENCIADOR DE CART√ïES DE CR√âDITO
    
    Esta classe cuida de tudo relacionado aos cart√µes de cr√©dito:
    - Cria√ß√£o de novos cart√µes
    - Compras e parcelamentos
    - Faturas e pagamentos
    - Gera√ß√£o de PDF das faturas
    
    √â como o "departamento de cart√µes" do banco.
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR
        
        Quando criamos um CartaoManager, ele define onde salvar
        os dados dos cart√µes e carrega os cart√µes existentes.
        """
        self.arquivo_cartoes = "cartoes.json"
        self.cartoes = self.carregar_cartoes()
    
    def carregar_cartoes(self):
        """
        üìÇ CARREGAR CART√ïES DO ARQUIVO
        
        Esta fun√ß√£o l√™ o arquivo JSON onde est√£o salvos todos os cart√µes.
        """
        if os.path.exists(self.arquivo_cartoes):
            try:
                with open(self.arquivo_cartoes, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def salvar_cartoes(self):
        """
        üíæ SALVAR CART√ïES NO ARQUIVO
        
        Esta fun√ß√£o salva todos os dados dos cart√µes no arquivo JSON.
        """
        with open(self.arquivo_cartoes, 'w', encoding='utf-8') as f:
            json.dump(self.cartoes, f, indent=2, ensure_ascii=False)
    
    def criar_cartao(self, usuario):
        """
        ‚ûï CRIAR NOVO CART√ÉO
        
        Esta fun√ß√£o cria um novo cart√£o de cr√©dito para o usu√°rio.
        O limite inicial √© baseado em quantos cart√µes ele j√° tem:
        - 1¬∫ cart√£o: R$ 1.000
        - 2¬∫ cart√£o: R$ 2.000
        - 3¬∫ cart√£o: R$ 3.000
        - E assim por diante...
        """
        print("\n‚ûï SOLICITA√á√ÉO DE NOVO CART√ÉO")
        
        # Conta quantos cart√µes o usu√°rio j√° tem
        cartoes_usuario = self.get_cartoes_usuario(usuario)
        num_cartoes = len(cartoes_usuario)
        
        # Limite m√°ximo de 5 cart√µes por usu√°rio
        if num_cartoes >= 5:
            print("‚ùå Voc√™ j√° possui o m√°ximo de 5 cart√µes!")
            pausar()
            return False
        
        # Calcula o limite baseado no n√∫mero de cart√µes
        limite_inicial = (num_cartoes + 1) * 1000
        
        # Gera um n√∫mero √∫nico para o cart√£o
        numero_cartao = gerar_numero_cartao()
        
        # Cria o registro do cart√£o
        self.cartoes[numero_cartao] = {
            "usuario": usuario,
            "limite": limite_inicial,
            "usado": 0.0,                    # Quanto j√° gastou
            "fatura_atual": 0.0,             # Valor da fatura atual
            "compras": [],                   # Lista de compras
            "parcelas": [],                  # Lista de parcelas pendentes
            "data_criacao": datetime.now().isoformat()
        }
        
        self.salvar_cartoes()
        print(f"‚úÖ Cart√£o criado com sucesso!")
        print(f"üí≥ N√∫mero: {numero_cartao}")
        print(f"üí∞ Limite: R$ {limite_inicial:.2f}")
        pausar()
        return True
    
    def get_cartoes_usuario(self, usuario):
        """
        üí≥ OBTER CART√ïES DO USU√ÅRIO
        
        Esta fun√ß√£o retorna uma lista com todos os cart√µes de um usu√°rio.
        """
        cartoes_usuario = []
        for numero, dados in self.cartoes.items():
            if dados["usuario"] == usuario:
                cartoes_usuario.append({
                    "numero": numero,
                    "limite": dados["limite"],
                    "usado": dados["usado"],
                    "disponivel": dados["limite"] - dados["usado"]
                })
        return cartoes_usuario
    
    def fazer_compra(self, usuario, numero_cartao, valor, parcelas, descricao):
        """
        üõí FAZER COMPRA NO CART√ÉO
        
        Esta fun√ß√£o processa uma compra no cart√£o de cr√©dito.
        Pode ser √† vista (1x) ou parcelada (at√© 24x).
        Aplica juros para parcelamentos acima de 6x.
        """
        if numero_cartao not in self.cartoes:
            print("‚ùå Cart√£o n√£o encontrado!")
            return False
        
        cartao = self.cartoes[numero_cartao]
        
        if cartao["usuario"] != usuario:
            print("‚ùå Este cart√£o n√£o pertence a voc√™!")
            return False
        
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        if parcelas < 1 or parcelas > 24:
            print("‚ùå N√∫mero de parcelas deve ser entre 1 e 24!")
            return False
        
        # Calcula juros baseado no n√∫mero de parcelas
        valor_final = valor
        if parcelas > 6:
            if parcelas <= 12:
                # 7-12 parcelas: 8% de juros
                valor_final = valor * 1.08
            else:
                # 13-24 parcelas: 12% de juros
                valor_final = valor * 1.12
        
        # Verifica se tem limite dispon√≠vel
        if cartao["usado"] + valor_final > cartao["limite"]:
            print("‚ùå Limite insuficiente!")
            print(f"üí∞ Dispon√≠vel: R$ {cartao['limite'] - cartao['usado']:.2f}")
            print(f"üí∏ Necess√°rio: R$ {valor_final:.2f}")
            return False
        
        # Registra a compra
        compra = {
            "data": datetime.now().isoformat(),
            "descricao": descricao,
            "valor_original": valor,
            "valor_final": valor_final,
            "parcelas": parcelas,
            "valor_parcela": valor_final / parcelas
        }
        
        cartao["compras"].append(compra)
        cartao["usado"] += valor_final
        
        # Cria as parcelas
        for i in range(parcelas):
            data_vencimento = datetime.now() + timedelta(days=30 * i)  # 30 dias entre parcelas
            parcela = {
                "numero": i + 1,
                "valor": valor_final / parcelas,
                "descricao": descricao,
                "data_vencimento": data_vencimento.isoformat(),
                "paga": False,
                "moved_to_bill": i == 0  # Primeira parcela j√° vai para a fatura
            }
            cartao["parcelas"].append(parcela)
        
        # Primeira parcela j√° entra na fatura atual
        cartao["fatura_atual"] += valor_final / parcelas
        
        self.salvar_cartoes()
        
        if valor_final > valor:
            print(f"üí∞ Valor original: R$ {valor:.2f}")
            print(f"üí∏ Valor com juros: R$ {valor_final:.2f}")
            print(f"üìä Juros aplicados: {((valor_final/valor - 1) * 100):.1f}%")
        
        print(f"‚úÖ Compra realizada em {parcelas}x de R$ {valor_final/parcelas:.2f}")
        return True
    
    def mostrar_fatura(self, usuario, numero_cartao):
        """
        üßæ MOSTRAR FATURA ATUAL
        
        Esta fun√ß√£o exibe a fatura atual do cart√£o, mostrando
        todas as parcelas que vencem neste m√™s.
        """
        if numero_cartao not in self.cartoes:
            print("‚ùå Cart√£o n√£o encontrado!")
            return
        
        cartao = self.cartoes[numero_cartao]
        
        if cartao["usuario"] != usuario:
            print("‚ùå Este cart√£o n√£o pertence a voc√™!")
            return
        
        print(f"\nüßæ FATURA DO CART√ÉO {numero_cartao}")
        print("=" * 50)
        
        # Atualiza a fatura com parcelas vencidas
        self.atualizar_fatura(numero_cartao)
        
        if cartao["fatura_atual"] == 0:
            print("‚úÖ Nenhuma fatura pendente!")
            return
        
        print(f"üí∞ Valor total da fatura: R$ {cartao['fatura_atual']:.2f}")
        print(f"üìÖ Data de vencimento: {(datetime.now() + timedelta(days=10)).strftime('%d/%m/%Y')}")
        
        print("\nüìã Itens da fatura:")
        for parcela in cartao["parcelas"]:
            if parcela["moved_to_bill"] and not parcela["paga"]:
                print(f"‚Ä¢ {parcela['descricao']} - Parcela {parcela['numero']} - R$ {parcela['valor']:.2f}")
    
    def atualizar_fatura(self, numero_cartao):
        """
        üîÑ ATUALIZAR FATURA
        
        Esta fun√ß√£o verifica se h√° parcelas que venceram e devem
        ser adicionadas √† fatura atual.
        """
        cartao = self.cartoes[numero_cartao]
        hoje = datetime.now()
        
        for parcela in cartao["parcelas"]:
            data_vencimento = datetime.fromisoformat(parcela["data_vencimento"])
            
            # Se a parcela venceu e ainda n√£o foi movida para a fatura
            if data_vencimento <= hoje and not parcela["moved_to_bill"] and not parcela["paga"]:
                cartao["fatura_atual"] += parcela["valor"]
                parcela["moved_to_bill"] = True
        
        self.salvar_cartoes()
    
    def pagar_fatura(self, usuario, numero_cartao, valor, usuario_manager):
        """
        üí∞ PAGAR FATURA DO CART√ÉO
        
        Esta fun√ß√£o permite pagar a fatura do cart√£o usando
        o saldo da conta corrente.
        """
        if numero_cartao not in self.cartoes:
            print("‚ùå Cart√£o n√£o encontrado!")
            return False
        
        cartao = self.cartoes[numero_cartao]
        
        if cartao["usuario"] != usuario:
            print("‚ùå Este cart√£o n√£o pertence a voc√™!")
            return False
        
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        if valor > cartao["fatura_atual"]:
            print(f"‚ùå Valor maior que a fatura! Fatura atual: R$ {cartao['fatura_atual']:.2f}")
            return False
        
        # Verifica se tem saldo na conta
        if not usuario_manager.sacar(usuario, valor):
            return False
        
        # Paga as parcelas proporcionalmente
        valor_restante = valor
        for parcela in cartao["parcelas"]:
            if parcela["moved_to_bill"] and not parcela["paga"] and valor_restante > 0:
                if valor_restante >= parcela["valor"]:
                    # Paga a parcela inteira
                    valor_restante -= parcela["valor"]
                    parcela["paga"] = True
                    cartao["usado"] -= parcela["valor"]
                else:
                    # Paga parcialmente
                    break
        
        cartao["fatura_atual"] -= valor
        if cartao["fatura_atual"] < 0.01:  # Evita valores muito pequenos
            cartao["fatura_atual"] = 0
        
        self.salvar_cartoes()
        usuario_manager.adicionar_historico(usuario, f"PAGAMENTO CART√ÉO {numero_cartao}: -R$ {valor:.2f}")
        return True
    
    def gerar_fatura_pdf(self, usuario, numero_cartao):
        """
        üìÑ GERAR FATURA EM PDF
        
        Esta fun√ß√£o cria um arquivo PDF com a fatura do cart√£o.
        O PDF inclui todas as informa√ß√µes da fatura de forma organizada.
        """
        if numero_cartao not in self.cartoes:
            print("‚ùå Cart√£o n√£o encontrado!")
            return
        
        cartao = self.cartoes[numero_cartao]
        
        if cartao["usuario"] != usuario:
            print("‚ùå Este cart√£o n√£o pertence a voc√™!")
            return
        
        # Nome do arquivo PDF
        nome_arquivo = f"fatura_{numero_cartao}_{datetime.now().strftime('%Y%m%d')}.pdf"
        
        try:
            # Cria o documento PDF
            doc = SimpleDocTemplate(nome_arquivo, pagesize=letter)
            styles = getSampleStyleSheet()
            story = []
            
            # T√≠tulo
            titulo = Paragraph("FATURA DO CART√ÉO DE CR√âDITO", styles['Title'])
            story.append(titulo)
            story.append(Spacer(1, 12))
            
            # Informa√ß√µes do cart√£o
            info_cartao = f"""
            <b>N√∫mero do Cart√£o:</b> {numero_cartao}<br/>
            <b>Titular:</b> {usuario}<br/>
            <b>Data da Fatura:</b> {datetime.now().strftime('%d/%m/%Y')}<br/>
            <b>Vencimento:</b> {(datetime.now() + timedelta(days=10)).strftime('%d/%m/%Y')}<br/>
            <b>Valor Total:</b> R$ {cartao['fatura_atual']:.2f}
            """
            
            info_para = Paragraph(info_cartao, styles['Normal'])
            story.append(info_para)
            story.append(Spacer(1, 20))
            
            # Tabela com os itens da fatura
            dados_tabela = [['Descri√ß√£o', 'Parcela', 'Valor']]
            
            for parcela in cartao["parcelas"]:
                if parcela["moved_to_bill"] and not parcela["paga"]:
                    dados_tabela.append([
                        parcela['descricao'],
                        f"{parcela['numero']}",
                        f"R$ {parcela['valor']:.2f}"
                    ])
            
            if len(dados_tabela) > 1:  # Se tem itens al√©m do cabe√ßalho
                tabela = Table(dados_tabela)
                tabela.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 14),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                story.append(tabela)
            
            # Gera o PDF
            doc.build(story)
            print(f"‚úÖ Fatura PDF gerada: {nome_arquivo}")
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar PDF: {e}")

# ============================================================================
# CLASSE GERENCIADOR DE INVESTIMENTOS
# ============================================================================

class InvestimentoManager:
    """
    üìà GERENCIADOR DE INVESTIMENTOS
    
    Esta classe cuida de tudo relacionado aos investimentos:
    - Aplica√ß√µes em diferentes tipos de investimento
    - Simula√ß√£o de rendimentos
    - Resgate de investimentos
    
    √â como a "corretora" do banco.
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR
        
        Define onde salvar os dados dos investimentos e carrega os existentes.
        """
        self.arquivo_investimentos = "investimentos.json"
        self.investimentos = self.carregar_investimentos()
        
        # Tipos de investimento dispon√≠veis com suas caracter√≠sticas
        self.tipos_investimento = {
            "poupanca": {"nome": "Poupan√ßa", "rendimento_mensal": 0.005, "risco": "Baixo"},
            "cdb": {"nome": "CDB", "rendimento_mensal": 0.008, "risco": "Baixo"},
            "tesouro": {"nome": "Tesouro Direto", "rendimento_mensal": 0.01, "risco": "M√©dio"},
            "acoes": {"nome": "A√ß√µes", "rendimento_mensal": 0.015, "risco": "Alto"},
            "bitcoin": {"nome": "Bitcoin", "rendimento_mensal": 0.02, "risco": "Muito Alto"}
        }
    
    def carregar_investimentos(self):
        """
        üìÇ CARREGAR INVESTIMENTOS DO ARQUIVO
        """
        if os.path.exists(self.arquivo_investimentos):
            try:
                with open(self.arquivo_investimentos, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def salvar_investimentos(self):
        """
        üíæ SALVAR INVESTIMENTOS NO ARQUIVO
        """
        with open(self.arquivo_investimentos, 'w', encoding='utf-8') as f:
            json.dump(self.investimentos, f, indent=2, ensure_ascii=False)
    
    def nova_aplicacao(self, usuario, usuario_manager, auditoria):
        """
        üí∞ FAZER NOVA APLICA√á√ÉO
        
        Esta fun√ß√£o permite que o usu√°rio invista dinheiro
        em diferentes tipos de investimento.
        """
        print("\nüí∞ NOVA APLICA√á√ÉO")
        
        # Mostra os tipos de investimento dispon√≠veis
        print("\nüìä Tipos de investimento dispon√≠veis:")
        for codigo, info in self.tipos_investimento.items():
            rendimento_anual = (info["rendimento_mensal"] * 12) * 100
            print(f"{codigo}: {info['nome']} - {rendimento_anual:.1f}% ao ano - Risco: {info['risco']}")
        
        tipo = input("\nEscolha o tipo de investimento: ").strip().lower()
        
        if tipo not in self.tipos_investimento:
            print("‚ùå Tipo de investimento inv√°lido!")
            pausar()
            return
        
        try:
            valor = float(input("üí∞ Valor a investir: R$ "))
            
            if valor <= 0:
                print("‚ùå Valor deve ser positivo!")
                pausar()
                return
            
            # Verifica se tem saldo suficiente
            if not usuario_manager.sacar(usuario, valor):
                pausar()
                return
            
            # Cria o investimento
            investimento_id = f"{usuario}_{tipo}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            self.investimentos[investimento_id] = {
                "usuario": usuario,
                "tipo": tipo,
                "valor_inicial": valor,
                "valor_atual": valor,
                "data_aplicacao": datetime.now().isoformat(),
                "rendimento_mensal": self.tipos_investimento[tipo]["rendimento_mensal"]
            }
            
            self.salvar_investimentos()
            
            # Registra no hist√≥rico e auditoria
            usuario_manager.adicionar_historico(usuario, f"INVESTIMENTO: {self.tipos_investimento[tipo]['nome']} - R$ {valor:.2f}")
            auditoria.log_acao(usuario, "INVESTIMENTO", f"Aplica√ß√£o em {self.tipos_investimento[tipo]['nome']} - R$ {valor:.2f}")
            
            print(f"‚úÖ Investimento realizado com sucesso!")
            print(f"üìà Tipo: {self.tipos_investimento[tipo]['nome']}")
            print(f"üí∞ Valor: R$ {valor:.2f}")
            
        except ValueError:
            print("‚ùå Valor inv√°lido!")
        
        pausar()
    
    def get_investimentos_usuario(self, usuario):
        """
        üìä OBTER INVESTIMENTOS DO USU√ÅRIO
        
        Esta fun√ß√£o retorna todos os investimentos de um usu√°rio,
        atualizando os rendimentos baseado no tempo decorrido.
        """
        investimentos_usuario = []
        hoje = datetime.now()
        
        for inv_id, dados in self.investimentos.items():
            if dados["usuario"] == usuario:
                # Calcula o rendimento baseado no tempo decorrido
                data_aplicacao = datetime.fromisoformat(dados["data_aplicacao"])
                meses_decorridos = (hoje - data_aplicacao).days / 30  # Aproxima√ß√£o
                
                # Aplica o rendimento composto
                valor_atual = dados["valor_inicial"] * ((1 + dados["rendimento_mensal"]) ** meses_decorridos)
                
                # Atualiza o valor atual no arquivo
                self.investimentos[inv_id]["valor_atual"] = valor_atual
                
                investimentos_usuario.append({
                    "id": inv_id,
                    "tipo": self.tipos_investimento[dados["tipo"]]["nome"],
                    "valor_inicial": dados["valor_inicial"],
                    "valor_atual": valor_atual,
                    "rendimento": valor_atual - dados["valor_inicial"],
                    "data_aplicacao": data_aplicacao.strftime("%d/%m/%Y")
                })
        
        self.salvar_investimentos()
        return investimentos_usuario
    
    def mostrar_investimentos(self, usuario):
        """
        üìä MOSTRAR INVESTIMENTOS
        
        Esta fun√ß√£o exibe todos os investimentos do usu√°rio
        com seus valores atuais e rendimentos.
        """
        investimentos = self.get_investimentos_usuario(usuario)
        
        print(f"\nüìä SEUS INVESTIMENTOS - {usuario}")
        print("=" * 60)
        
        if not investimentos:
            print("üìù Voc√™ n√£o possui investimentos.")
            return
        
        total_investido = 0
        total_atual = 0
        
        for inv in investimentos:
            print(f"\nüí∞ {inv['tipo']}")
            print(f"   Valor inicial: R$ {inv['valor_inicial']:.2f}")
            print(f"   Valor atual: R$ {inv['valor_atual']:.2f}")
            print(f"   Rendimento: R$ {inv['rendimento']:.2f}")
            print(f"   Data: {inv['data_aplicacao']}")
            
            total_investido += inv['valor_inicial']
            total_atual += inv['valor_atual']
        
        print("\n" + "=" * 60)
        print(f"üí∞ Total investido: R$ {total_investido:.2f}")
        print(f"üìà Valor atual: R$ {total_atual:.2f}")
        print(f"üíπ Rendimento total: R$ {total_atual - total_investido:.2f}")
    
    def resgatar_investimento(self, usuario, usuario_manager, auditoria):
        """
        üí∏ RESGATAR INVESTIMENTO
        
        Esta fun√ß√£o permite que o usu√°rio retire dinheiro
        dos seus investimentos.
        """
        investimentos = self.get_investimentos_usuario(usuario)
        
        if not investimentos:
            print("‚ùå Voc√™ n√£o possui investimentos para resgatar!")
            pausar()
            return
        
        print("\nüí∏ RESGATAR INVESTIMENTO")
        print("\nSeus investimentos:")
        
        for i, inv in enumerate(investimentos, 1):
            print(f"{i}. {inv['tipo']} - R$ {inv['valor_atual']:.2f} (Rendimento: R$ {inv['rendimento']:.2f})")
        
        try:
            escolha = int(input("\nEscolha o investimento para resgatar: ")) - 1
            
            if escolha < 0 or escolha >= len(investimentos):
                print("‚ùå Op√ß√£o inv√°lida!")
                pausar()
                return
            
            investimento = investimentos[escolha]
            
            # Confirma o resgate
            print(f"\nüí∞ Valor a resgatar: R$ {investimento['valor_atual']:.2f}")
            confirma = input("Confirma o resgate? (s/n): ").strip().lower()
            
            if confirma != 's':
                print("‚ùå Resgate cancelado!")
                pausar()
                return
            
            # Adiciona o dinheiro na conta
            usuario_manager.depositar(usuario, investimento['valor_atual'])
            
            # Remove o investimento
            del self.investimentos[investimento['id']]
            self.salvar_investimentos()
            
            # Registra no hist√≥rico e auditoria
            usuario_manager.adicionar_historico(usuario, f"RESGATE: {investimento['tipo']} - R$ {investimento['valor_atual']:.2f}")
            auditoria.log_acao(usuario, "RESGATE", f"Resgate de {investimento['tipo']} - R$ {investimento['valor_atual']:.2f}")
            
            print(f"‚úÖ Resgate realizado com sucesso!")
            print(f"üí∞ Valor creditado: R$ {investimento['valor_atual']:.2f}")
            
        except ValueError:
            print("‚ùå Op√ß√£o inv√°lida!")
        
        pausar()

# ============================================================================
# CLASSE GERENCIADOR DE EMPR√âSTIMOS
# ============================================================================

class EmprestimoManager:
    """
    üíµ GERENCIADOR DE EMPR√âSTIMOS
    
    Esta classe cuida de tudo relacionado aos empr√©stimos:
    - Solicita√ß√£o de empr√©stimos
    - C√°lculo de juros
    - Pagamentos e quita√ß√£o
    
    √â como o "setor de cr√©dito" do banco.
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR
        
        Define onde salvar os dados dos empr√©stimos e carrega os existentes.
        """
        self.arquivo_emprestimos = "emprestimos.json"
        self.emprestimos = self.carregar_emprestimos()
    
    def carregar_emprestimos(self):
        """
        üìÇ CARREGAR EMPR√âSTIMOS DO ARQUIVO
        """
        if os.path.exists(self.arquivo_emprestimos):
            try:
                with open(self.arquivo_emprestimos, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def salvar_emprestimos(self):
        """
        üíæ SALVAR EMPR√âSTIMOS NO ARQUIVO
        """
        with open(self.arquivo_emprestimos, 'w', encoding='utf-8') as f:
            json.dump(self.emprestimos, f, indent=2, ensure_ascii=False)
    
    def solicitar_emprestimo(self, usuario, usuario_manager, auditoria):
        """
        üí∞ SOLICITAR EMPR√âSTIMO
        
        Esta fun√ß√£o permite que o usu√°rio pe√ßa dinheiro emprestado.
        O limite √© baseado no saldo atual do usu√°rio.
        """
        print("\nüí∞ SOLICITA√á√ÉO DE EMPR√âSTIMO")
        
        saldo_atual = usuario_manager.get_saldo(usuario)
        limite_emprestimo = saldo_atual * 5  # Pode pedir at√© 5x o saldo
        
        print(f"üí∞ Seu saldo atual: R$ {saldo_atual:.2f}")
        print(f"üìä Limite para empr√©stimo: R$ {limite_emprestimo:.2f}")
        print("üíπ Taxa de juros: 2% ao m√™s")
        
        if limite_emprestimo < 100:
            print("‚ùå Voc√™ precisa ter pelo menos R$ 20,00 de saldo para solicitar empr√©stimo!")
            pausar()
            return
        
        try:
            valor = float(input("üí∞ Valor do empr√©stimo: R$ "))
            parcelas = int(input("üìÖ N√∫mero de parcelas (1-36): "))
            
            if valor <= 0:
                print("‚ùå Valor deve ser positivo!")
                pausar()
                return
            
            if valor > limite_emprestimo:
                print(f"‚ùå Valor excede o limite de R$ {limite_emprestimo:.2f}!")
                pausar()
                return
            
            if parcelas < 1 or parcelas > 36:
                print("‚ùå N√∫mero de parcelas deve ser entre 1 e 36!")
                pausar()
                return
            
            # Calcula o valor total com juros (2% ao m√™s)
            valor_total = valor * ((1.02) ** parcelas)
            valor_parcela = valor_total / parcelas
            
            print(f"\nüìä SIMULA√á√ÉO DO EMPR√âSTIMO")
            print(f"üí∞ Valor solicitado: R$ {valor:.2f}")
            print(f"üí∏ Valor total a pagar: R$ {valor_total:.2f}")
            print(f"üìÖ {parcelas}x de R$ {valor_parcela:.2f}")
            print(f"üíπ Total de juros: R$ {valor_total - valor:.2f}")
            
            confirma = input("\nConfirma o empr√©stimo? (s/n): ").strip().lower()
            
            if confirma != 's':
                print("‚ùå Empr√©stimo cancelado!")
                pausar()
                return
            
            # Cria o empr√©stimo
            emprestimo_id = f"{usuario}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            self.emprestimos[emprestimo_id] = {
                "usuario": usuario,
                "valor_original": valor,
                "valor_total": valor_total,
                "valor_atual": valor_total,  # Quanto ainda deve
                "parcelas_total": parcelas,
                "parcelas_pagas": 0,
                "valor_parcela": valor_parcela,
                "data_emprestimo": datetime.now().isoformat(),
                "status": "ativo"
            }
            
            # Adiciona o dinheiro na conta do usu√°rio
            usuario_manager.depositar(usuario, valor)
            
            self.salvar_emprestimos()
            
            # Registra no hist√≥rico e auditoria
            usuario_manager.adicionar_historico(usuario, f"EMPR√âSTIMO: R$ {valor:.2f} em {parcelas}x")
            auditoria.log_acao(usuario, "EMPRESTIMO", f"Empr√©stimo de R$ {valor:.2f} em {parcelas}x")
            
            print(f"‚úÖ Empr√©stimo aprovado e creditado na sua conta!")
            
        except ValueError:
            print("‚ùå Valor inv√°lido!")
        
        pausar()
    
    def get_emprestimos_usuario(self, usuario):
        """
        üìä OBTER EMPR√âSTIMOS DO USU√ÅRIO
        
        Esta fun√ß√£o retorna todos os empr√©stimos ativos de um usu√°rio.
        """
        emprestimos_usuario = []
        
        for emp_id, dados in self.emprestimos.items():
            if dados["usuario"] == usuario and dados["status"] == "ativo":
                emprestimos_usuario.append({
                    "id": emp_id,
                    "valor_original": dados["valor_original"],
                    "valor_atual": dados["valor_atual"],
                    "parcelas_restantes": dados["parcelas_total"] - dados["parcelas_pagas"],
                    "valor_parcela": dados["valor_parcela"],
                    "data_emprestimo": datetime.fromisoformat(dados["data_emprestimo"]).strftime("%d/%m/%Y")
                })
        
        return emprestimos_usuario
    
    def mostrar_emprestimos(self, usuario):
        """
        üìä MOSTRAR EMPR√âSTIMOS
        
        Esta fun√ß√£o exibe todos os empr√©stimos ativos do usu√°rio.
        """
        emprestimos = self.get_emprestimos_usuario(usuario)
        
        print(f"\nüìä SEUS EMPR√âSTIMOS - {usuario}")
        print("=" * 60)
        
        if not emprestimos:
            print("‚úÖ Voc√™ n√£o possui empr√©stimos ativos.")
            return
        
        total_devido = 0
        
        for emp in emprestimos:
            print(f"\nüí∞ Empr√©stimo de {emp['data_emprestimo']}")
            print(f"   Valor original: R$ {emp['valor_original']:.2f}")
            print(f"   Valor atual devido: R$ {emp['valor_atual']:.2f}")
            print(f"   Parcelas restantes: {emp['parcelas_restantes']}")
            print(f"   Valor da parcela: R$ {emp['valor_parcela']:.2f}")
            
            total_devido += emp['valor_atual']
        
        print("\n" + "=" * 60)
        print(f"üí∏ Total devido: R$ {total_devido:.2f}")
    
    def pagar_emprestimo(self, usuario, usuario_manager, auditoria):
        """
        üí∏ PAGAR EMPR√âSTIMO
        
        Esta fun√ß√£o permite que o usu√°rio pague parcelas
        ou quite completamente um empr√©stimo.
        """
        emprestimos = self.get_emprestimos_usuario(usuario)
        
        if not emprestimos:
            print("‚úÖ Voc√™ n√£o possui empr√©stimos para pagar!")
            pausar()
            return
        
        print("\nüí∏ PAGAR EMPR√âSTIMO")
        print("\nSeus empr√©stimos:")
        
        for i, emp in enumerate(emprestimos, 1):
            print(f"{i}. Empr√©stimo de {emp['data_emprestimo']} - Devido: R$ {emp['valor_atual']:.2f}")
        
        try:
            escolha = int(input("\nEscolha o empr√©stimo para pagar: ")) - 1
            
            if escolha < 0 or escolha >= len(emprestimos):
                print("‚ùå Op√ß√£o inv√°lida!")
                pausar()
                return
            
            emprestimo = emprestimos[escolha]
            
            print(f"\nüí∞ Valor devido: R$ {emprestimo['valor_atual']:.2f}")
            print(f"üìÖ Valor da parcela: R$ {emprestimo['valor_parcela']:.2f}")
            print(f"üî¢ Parcelas restantes: {emprestimo['parcelas_restantes']}")
            
            print("\n1. Pagar uma parcela")
            print("2. Quitar completamente")
            
            opcao = input("Escolha uma op√ß√£o: ").strip()
            
            if opcao == "1":
                # Pagar uma parcela
                valor_pagamento = emprestimo['valor_parcela']
                
                if not usuario_manager.sacar(usuario, valor_pagamento):
                    pausar()
                    return
                
                # Atualiza o empr√©stimo
                emp_dados = self.emprestimos[emprestimo['id']]
                emp_dados['valor_atual'] -= valor_pagamento
                emp_dados['parcelas_pagas'] += 1
                
                # Se pagou todas as parcelas, marca como quitado
                if emp_dados['parcelas_pagas'] >= emp_dados['parcelas_total']:
                    emp_dados['status'] = "quitado"
                    print("üéâ Empr√©stimo quitado completamente!")
                
                self.salvar_emprestimos()
                
                # Registra no hist√≥rico e auditoria
                usuario_manager.adicionar_historico(usuario, f"PAGAMENTO EMPR√âSTIMO: R$ {valor_pagamento:.2f}")
                auditoria.log_acao(usuario, "PAGAMENTO_EMPRESTIMO", f"Pagamento de parcela - R$ {valor_pagamento:.2f}")
                
                print(f"‚úÖ Parcela paga com sucesso!")
                print(f"üí∞ Valor pago: R$ {valor_pagamento:.2f}")
                
            elif opcao == "2":
                # Quitar completamente
                valor_quitacao = emprestimo['valor_atual']
                
                if not usuario_manager.sacar(usuario, valor_quitacao):
                    pausar()
                    return
                
                # Marca como quitado
                self.emprestimos[emprestimo['id']]['status'] = "quitado"
                self.emprestimos[emprestimo['id']]['valor_atual'] = 0
                
                self.salvar_emprestimos()
                
                # Registra no hist√≥rico e auditoria
                usuario_manager.adicionar_historico(usuario, f"QUITA√á√ÉO EMPR√âSTIMO: R$ {valor_quitacao:.2f}")
                auditoria.log_acao(usuario, "QUITACAO_EMPRESTIMO", f"Quita√ß√£o completa - R$ {valor_quitacao:.2f}")
                
                print(f"üéâ Empr√©stimo quitado completamente!")
                print(f"üí∞ Valor pago: R$ {valor_quitacao:.2f}")
            
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
        
        except ValueError:
            print("‚ùå Op√ß√£o inv√°lida!")
        
        pausar()

# ============================================================================
# CLASSE GERENCIADOR ADMINISTRATIVO
# ============================================================================

class AdminManager:
    """
    üîß GERENCIADOR ADMINISTRATIVO
    
    Esta classe cuida das fun√ß√µes administrativas do sistema:
    - Login de administradores
    - Relat√≥rios e estat√≠sticas
    - Exporta√ß√£o de dados
    
    √â como a "ger√™ncia" do banco.
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR
        
        Define a senha padr√£o do administrador.
        Em um sistema real, isso seria mais seguro.
        """
        self.senha_admin = "admin123"  # Senha padr√£o do administrador
    
    def login_admin(self):
        """
        üîê LOGIN ADMINISTRATIVO
        
        Esta fun√ß√£o permite que administradores fa√ßam login
        no painel administrativo.
        """
        print("\nüîê LOGIN ADMINISTRATIVO")
        
        senha = input("üîí Senha de administrador: ").strip()
        
        if senha != self.senha_admin:
            print("‚ùå Senha incorreta!")
            pausar()
            return False
        
        print("‚úÖ Login administrativo realizado com sucesso!")
        pausar()
        return True
    
    def listar_usuarios(self, usuario_manager):
        """
        üë• LISTAR TODOS OS USU√ÅRIOS
        
        Esta fun√ß√£o mostra uma lista de todos os usu√°rios
        cadastrados no sistema com suas informa√ß√µes b√°sicas.
        """
        usuarios = usuario_manager.get_todos_usuarios()
        
        print("\nüë• LISTA DE USU√ÅRIOS")
        print("=" * 80)
        
        if not usuarios:
            print("üìù Nenhum usu√°rio cadastrado.")
            return
        
        for nome, dados in usuarios.items():
            data_cadastro = datetime.fromisoformat(dados["data_cadastro"]).strftime("%d/%m/%Y")
            print(f"üë§ {nome}")
            print(f"   üí∞ Saldo: R$ {dados['saldo']:.2f}")
            print(f"   ‚≠ê Pontos: {dados.get('pontos', 0)}")
            print(f"   üìÖ Cadastro: {data_cadastro}")
            print(f"   üìä Transa√ß√µes: {len(dados['historico'])}")
            print()
    
    def mostrar_estatisticas(self, usuario_manager):
        """
        üìä MOSTRAR ESTAT√çSTICAS GERAIS
        
        Esta fun√ß√£o calcula e exibe estat√≠sticas gerais do sistema:
        total de usu√°rios, saldo total, transa√ß√µes, etc.
        """
        usuarios = usuario_manager.get_todos_usuarios()
        
        print("\nüìä ESTAT√çSTICAS GERAIS DO SISTEMA")
        print("=" * 50)
        
        if not usuarios:
            print("üìù Nenhum dado dispon√≠vel.")
            return
        
        # Calcula estat√≠sticas
        total_usuarios = len(usuarios)
        saldo_total = sum(dados['saldo'] for dados in usuarios.values())
        pontos_total = sum(dados.get('pontos', 0) for dados in usuarios.values())
        transacoes_total = sum(len(dados['historico']) for dados in usuarios.values())
        
        # Usu√°rio com maior saldo
        usuario_maior_saldo = max(usuarios.items(), key=lambda x: x[1]['saldo'])
        
        # Usu√°rio mais ativo (mais transa√ß√µes)
        usuario_mais_ativo = max(usuarios.items(), key=lambda x: len(x[1]['historico']))
        
        print(f"üë• Total de usu√°rios: {total_usuarios}")
        print(f"üí∞ Saldo total do sistema: R$ {saldo_total:.2f}")
        print(f"‚≠ê Pontos totais distribu√≠dos: {pontos_total}")
        print(f"üìä Total de transa√ß√µes: {transacoes_total}")
        print(f"üìà M√©dia de saldo por usu√°rio: R$ {saldo_total/total_usuarios:.2f}")
        print(f"üèÜ Usu√°rio com maior saldo: {usuario_maior_saldo[0]} (R$ {usuario_maior_saldo[1]['saldo']:.2f})")
        print(f"üéØ Usu√°rio mais ativo: {usuario_mais_ativo[0]} ({len(usuario_mais_ativo[1]['historico'])} transa√ß√µes)")
    
    def gerar_relatorio_csv(self, usuario_manager):
        """
        üìÑ GERAR RELAT√ìRIO CSV
        
        Esta fun√ß√£o gera um arquivo CSV (planilha) com dados
        de todos os usu√°rios do sistema.
        """
        usuarios = usuario_manager.get_todos_usuarios()
        nome_arquivo = f"relatorio_usuarios_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            with open(nome_arquivo, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                
                # Cabe√ßalho
                writer.writerow(['Usuario', 'Saldo', 'Pontos', 'Data_Cadastro', 'Total_Transacoes'])
                
                # Dados dos usu√°rios
                for nome, dados in usuarios.items():
                    writer.writerow([
                        nome,
                        dados['saldo'],
                        dados.get('pontos', 0),
                        dados['data_cadastro'],
                        len(dados['historico'])
                    ])
            
            print(f"‚úÖ Relat√≥rio CSV gerado: {nome_arquivo}")
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar relat√≥rio CSV: {e}")
    
    def gerar_relatorio_pdf(self, usuario_manager):
        """
        üìÑ GERAR RELAT√ìRIO PDF
        
        Esta fun√ß√£o gera um relat√≥rio completo em PDF
        com estat√≠sticas e dados dos usu√°rios.
        """
        usuarios = usuario_manager.get_todos_usuarios()
        nome_arquivo = f"relatorio_sistema_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        try:
            doc = SimpleDocTemplate(nome_arquivo, pagesize=letter)
            styles = getSampleStyleSheet()
            story = []
            
            # T√≠tulo
            titulo = Paragraph("RELAT√ìRIO ADMINISTRATIVO DO SISTEMA BANC√ÅRIO", styles['Title'])
            story.append(titulo)
            story.append(Spacer(1, 12))
            
            # Data do relat√≥rio
            data_relatorio = Paragraph(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}", styles['Normal'])
            story.append(data_relatorio)
            story.append(Spacer(1, 20))
            
            # Estat√≠sticas gerais
            if usuarios:
                total_usuarios = len(usuarios)
                saldo_total = sum(dados['saldo'] for dados in usuarios.values())
                pontos_total = sum(dados.get('pontos', 0) for dados in usuarios.values())
                
                estatisticas = f"""
                <b>ESTAT√çSTICAS GERAIS</b><br/>
                <br/>
                Total de usu√°rios: {total_usuarios}<br/>
                Saldo total do sistema: R$ {saldo_total:.2f}<br/>
                Pontos totais distribu√≠dos: {pontos_total}<br/>
                M√©dia de saldo por usu√°rio: R$ {saldo_total/total_usuarios:.2f}<br/>
                """
                
                stats_para = Paragraph(estatisticas, styles['Normal'])
                story.append(stats_para)
                story.append(Spacer(1, 20))
                
                # Tabela com dados dos usu√°rios
                dados_tabela = [['Usu√°rio', 'Saldo', 'Pontos', 'Transa√ß√µes']]
                
                for nome, dados in usuarios.items():
                    dados_tabela.append([
                        nome,
                        f"R$ {dados['saldo']:.2f}",
                        str(dados.get('pontos', 0)),
                        str(len(dados['historico']))
                    ])
                
                tabela = Table(dados_tabela)
                tabela.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                story.append(tabela)
            
            doc.build(story)
            print(f"‚úÖ Relat√≥rio PDF gerado: {nome_arquivo}")
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar relat√≥rio PDF: {e}")

# ============================================================================
# CLASSE GERENCIADOR DE AUDITORIA
# ============================================================================

class AuditoriaManager:
    """
    üìù GERENCIADOR DE AUDITORIA
    
    Esta classe cuida dos logs de seguran√ßa do sistema:
    - Registro de todas as a√ß√µes dos usu√°rios
    - Controle de acesso e seguran√ßa
    - Hist√≥rico de opera√ß√µes
    
    √â como o "departamento de seguran√ßa" do banco.
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR
        
        Define onde salvar os logs de auditoria e carrega os existentes.
        """
        self.arquivo_logs = "auditoria.json"
        self.logs = self.carregar_logs()
    
    def carregar_logs(self):
        """
        üìÇ CARREGAR LOGS DO ARQUIVO
        """
        if os.path.exists(self.arquivo_logs):
            try:
                with open(self.arquivo_logs, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []
    
    def salvar_logs(self):
        """
        üíæ SALVAR LOGS NO ARQUIVO
        """
        with open(self.arquivo_logs, 'w', encoding='utf-8') as f:
            json.dump(self.logs, f, indent=2, ensure_ascii=False)
    
    def log_acao(self, usuario, acao, detalhes):
        """
        üìù REGISTRAR A√á√ÉO NO LOG
        
        Esta fun√ß√£o registra uma a√ß√£o do usu√°rio no log de auditoria.
        Cada registro inclui: usu√°rio, a√ß√£o, detalhes, data e hora.
        """
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "usuario": usuario,
            "acao": acao,
            "detalhes": detalhes,
            "ip": "127.0.0.1"  # Em um sistema real, seria o IP real do usu√°rio
        }
        
        self.logs.append(log_entry)
        self.salvar_logs()
        
        # Mant√©m apenas os √∫ltimos 1000 logs para n√£o ocupar muito espa√ßo
        if len(self.logs) > 1000:
            self.logs = self.logs[-1000:]
            self.salvar_logs()
    
    def mostrar_logs(self, limite=50):
        """
        üìã MOSTRAR LOGS DE AUDITORIA
        
        Esta fun√ß√£o exibe os logs mais recentes do sistema.
        √â √∫til para administradores verificarem atividades suspeitas.
        """
        print(f"\nüìã LOGS DE AUDITORIA (√öltimos {limite})")
        print("=" * 80)
        
        if not self.logs:
            print("üìù Nenhum log encontrado.")
            return
        
        # Mostra os logs mais recentes primeiro
        logs_recentes = self.logs[-limite:]
        logs_recentes.reverse()
        
        for log in logs_recentes:
            timestamp = datetime.fromisoformat(log["timestamp"]).strftime("%d/%m/%Y %H:%M:%S")
            print(f"[{timestamp}] {log['usuario']} - {log['acao']}: {log['detalhes']}")

# ============================================================================
# FUN√á√ïES DO MENU PRINCIPAL
# ============================================================================

def main():
    """
    üöÄ FUN√á√ÉO PRINCIPAL DO SISTEMA
    
    Esta √© a primeira fun√ß√£o que roda quando o programa inicia.
    √â como a "porta de entrada" do banco - aqui o cliente decide
    se quer fazer login, se cadastrar ou se √© um administrador.
    """
    
    # Limpa a tela para come√ßar "limpo"
    limpar_tela()
    
    # Mostra o t√≠tulo bonito do sistema
    print("=" * 50)
    print("üè¶ SISTEMA BANC√ÅRIO AVAN√áADO")
    print("=" * 50)
    
    # Cada manager √© respons√°vel por uma √°rea espec√≠fica
    usuario_manager = UsuarioManager()           # Gerente de usu√°rios
    cartao_manager = CartaoManager()             # Gerente de cart√µes
    admin_manager = AdminManager()               # Gerente administrativo
    investimento_manager = InvestimentoManager() # Gerente de investimentos
    emprestimo_manager = EmprestimoManager()     # Gerente de empr√©stimos
    auditoria = AuditoriaManager()               # Gerente de seguran√ßa/logs
    
    # Loop infinito - o sistema s√≥ para quando o usu√°rio escolhe "Sair"
    while True:
        # Sempre limpa a tela antes de mostrar o menu
        limpar_tela()
        
        print("\nüè† MENU PRINCIPAL")
        print("1. üë§ Login")           # Para usu√°rios j√° cadastrados
        print("2. üìù Cadastrar")       # Para novos usu√°rios
        print("3. üîß Painel Administrativo")  # Para administradores
        print("4. üö™ Sair")           # Para fechar o programa
        
        # Pede para o usu√°rio escolher uma op√ß√£o
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            # Tenta fazer login do usu√°rio
            usuario_logado = usuario_manager.login()
            
            # Se o login deu certo, registra no log e vai para o menu do usu√°rio
            if usuario_logado:
                auditoria.log_acao(usuario_logado, "LOGIN", "Login realizado com sucesso")
                # Chama o menu espec√≠fico do usu√°rio logado
                menu_usuario(usuario_logado, usuario_manager, cartao_manager, 
                           investimento_manager, emprestimo_manager, auditoria)
        
        elif opcao == "2":
            # Tenta cadastrar um novo usu√°rio
            if usuario_manager.cadastrar():
                print("‚úÖ Usu√°rio cadastrado com sucesso!")
                pausar()  # Pausa para o usu√°rio ler a mensagem
        
        elif opcao == "3":
            # Tenta fazer login como administrador
            if admin_manager.login_admin():
                # Se deu certo, vai para o menu administrativo
                menu_admin(admin_manager, usuario_manager, auditoria)
        
        elif opcao == "4":
            # Usu√°rio quer sair - encerra o programa
            print("üëã Obrigado por usar nosso sistema!")
            break  # Sai do loop infinito
        
        else:
            # Op√ß√£o inv√°lida - mostra erro e continua no loop
            print("‚ùå Op√ß√£o inv√°lida!")
            pausar()

def menu_usuario(usuario, usuario_manager, cartao_manager, investimento_manager, emprestimo_manager, auditoria):
    """
    üë§ MENU DO USU√ÅRIO LOGADO
    
    Esta fun√ß√£o √© como o "balc√£o de atendimento" do banco.
    Aqui o usu√°rio pode fazer todas as opera√ß√µes banc√°rias:
    dep√≥sito, saque, transfer√™ncia, usar cart√£o, investir, etc.
    """
    
    # Loop infinito - usu√°rio fica no menu at√© fazer logout
    while True:
        limpar_tela()
        
        saldo = usuario_manager.get_saldo(usuario)    # Quanto dinheiro tem
        pontos = usuario_manager.get_pontos(usuario)  # Quantos pontos de recompensa tem
        
        # Mostra as informa√ß√µes do usu√°rio
        print(f"\nüëã Bem-vindo, {usuario}!")
        print(f"üí∞ Saldo: R$ {saldo:.2f}")      # .2f = duas casas decimais
        print(f"‚≠ê Pontos: {pontos}")
        
        print("\nüìã MENU DO USU√ÅRIO")
        print("1. üí∞ Dep√≥sito")           # Colocar dinheiro na conta
        print("2. üí∏ Saque")             # Tirar dinheiro da conta
        print("3. üîÑ Transfer√™ncia")     # Enviar dinheiro para outro usu√°rio
        print("4. üí≥ Cart√£o de Cr√©dito") # Gerenciar cart√µes
        print("5. üìà Investimentos")     # Aplicar dinheiro
        print("6. üíµ Empr√©stimos")       # Pedir dinheiro emprestado
        print("7. üßæ Pagamento de Boletos") # Pagar contas
        print("8. üìä Hist√≥rico")         # Ver movimenta√ß√µes
        print("9. üìÑ Exportar Hist√≥rico") # Salvar hist√≥rico em arquivo
        print("10. üö™ Logout")           # Sair da conta
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            # DEP√ìSITO - adicionar dinheiro na conta
            try:
                valor = float(input("üí∞ Valor do dep√≥sito: R$ "))
                if usuario_manager.depositar(usuario, valor):
                    # Registra a opera√ß√£o no log de auditoria
                    auditoria.log_acao(usuario, "DEPOSITO", f"Dep√≥sito de R$ {valor:.2f}")
                    print("‚úÖ Dep√≥sito realizado com sucesso!")
            except ValueError:
                print("‚ùå Valor inv√°lido!")
            pausar()
        
        elif opcao == "2":
            # SAQUE - tirar dinheiro da conta
            try:
                valor = float(input("üí∏ Valor do saque: R$ "))
                if usuario_manager.sacar(usuario, valor):
                    auditoria.log_acao(usuario, "SAQUE", f"Saque de R$ {valor:.2f}")
                    print("‚úÖ Saque realizado com sucesso!")
            except ValueError:
                print("‚ùå Valor inv√°lido!")
            pausar()
        
        elif opcao == "3":
            # TRANSFER√äNCIA - enviar dinheiro para outro usu√°rio
            destino = input("üéØ Usu√°rio de destino: ")
            try:
                valor = float(input("üí∞ Valor da transfer√™ncia: R$ "))
                if usuario_manager.transferir(usuario, destino, valor):
                    auditoria.log_acao(usuario, "TRANSFERENCIA", f"Transfer√™ncia de R$ {valor:.2f} para {destino}")
                    print("‚úÖ Transfer√™ncia realizada com sucesso!")
            except ValueError:
                print("‚ùå Valor inv√°lido!")
            pausar()
        
        elif opcao == "4":
            # CART√ÉO DE CR√âDITO - vai para o menu espec√≠fico de cart√µes
            menu_cartao(usuario, cartao_manager, usuario_manager, auditoria)
        
        elif opcao == "5":
            # INVESTIMENTOS - vai para o menu espec√≠fico de investimentos
            menu_investimentos(usuario, investimento_manager, usuario_manager, auditoria)
        
        elif opcao == "6":
            # EMPR√âSTIMOS - vai para o menu espec√≠fico de empr√©stimos
            menu_emprestimos(usuario, emprestimo_manager, usuario_manager, auditoria)
        
        elif opcao == "7":
            # PAGAMENTO DE BOLETOS - fun√ß√£o espec√≠fica para pagar contas
            pagamento_boletos(usuario, usuario_manager, auditoria)
        
        elif opcao == "8":
            # HIST√ìRICO - mostra todas as movimenta√ß√µes do usu√°rio
            usuario_manager.mostrar_historico(usuario)
            pausar()
        
        elif opcao == "9":
            # EXPORTAR HIST√ìRICO - salva o hist√≥rico em arquivo
            usuario_manager.exportar_historico(usuario)
            pausar()
        
        elif opcao == "10":
            # LOGOUT - sai da conta do usu√°rio
            auditoria.log_acao(usuario, "LOGOUT", "Logout realizado")
            break  # Sai do loop e volta para o menu principal
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            pausar()

def menu_cartao(usuario, cartao_manager, usuario_manager, auditoria):
    """
    üí≥ MENU DE CART√ïES DE CR√âDITO
    
    Esta fun√ß√£o √© como o "setor de cart√µes" do banco.
    Aqui o usu√°rio pode criar novos cart√µes, fazer compras,
    ver faturas e pagar as contas do cart√£o.
    """
    
    while True:
        limpar_tela()
        
        cartoes = cartao_manager.get_cartoes_usuario(usuario)
        
        print(f"\nüí≥ CART√ïES DE CR√âDITO - {usuario}")
        
        if not cartoes:
            print("üìù Voc√™ n√£o possui cart√µes de cr√©dito.")
            print("1. ‚ûï Solicitar novo cart√£o")
            print("2. üîô Voltar")
            
            opcao = input("\nEscolha uma op√ß√£o: ").strip()
            if opcao == "1":
                # Cria o primeiro cart√£o do usu√°rio
                if cartao_manager.criar_cartao(usuario):
                    auditoria.log_acao(usuario, "CARTAO_CRIADO", "Novo cart√£o de cr√©dito criado")
                    print("‚úÖ Cart√£o criado com sucesso!")
                pausar()
            elif opcao == "2":
                break  # Volta para o menu anterior
            continue  # Reinicia o loop
        
        print("\nüìã Seus cart√µes:")
        for i, cartao in enumerate(cartoes, 1):  # enumerate come√ßa do 1
            print(f"{i}. Cart√£o {cartao['numero']} - Limite: R$ {cartao['limite']:.2f}")
        
        print(f"\n{len(cartoes) + 1}. ‚ûï Solicitar novo cart√£o")
        print(f"{len(cartoes) + 2}. ‚≠ê Trocar pontos por saldo")
        print(f"{len(cartoes) + 3}. üîô Voltar")
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        try:
            opcao_num = int(opcao)  # Converte para n√∫mero
            
            if 1 <= opcao_num <= len(cartoes):
                cartao_selecionado = cartoes[opcao_num - 1]  # -1 porque lista come√ßa do 0
                # Vai para o menu espec√≠fico deste cart√£o
                menu_cartao_individual(usuario, cartao_selecionado, cartao_manager, usuario_manager, auditoria)
            
            # Se escolheu "Solicitar novo cart√£o"
            elif opcao_num == len(cartoes) + 1:
                if cartao_manager.criar_cartao(usuario):
                    auditoria.log_acao(usuario, "CARTAO_CRIADO", "Novo cart√£o de cr√©dito criado")
                    print("‚úÖ Cart√£o criado com sucesso!")
                pausar()
            
            # Se escolheu "Trocar pontos por saldo"
            elif opcao_num == len(cartoes) + 2:
                trocar_pontos_por_saldo(usuario, usuario_manager, auditoria)
            
            # Se escolheu "Voltar"
            elif opcao_num == len(cartoes) + 3:
                break
                
        except ValueError:
            # Se digitou algo que n√£o √© n√∫mero
            print("‚ùå Op√ß√£o inv√°lida!")
            pausar()

def menu_cartao_individual(usuario, cartao, cartao_manager, usuario_manager, auditoria):
    """
    üí≥ MENU DE UM CART√ÉO ESPEC√çFICO
    
    Quando o usu√°rio seleciona um cart√£o espec√≠fico, esta fun√ß√£o
    mostra todas as op√ß√µes para aquele cart√£o: fazer compras,
    ver fatura, gerar PDF, pagar conta, etc.
    """
    
    while True:
        limpar_tela()
        
        print(f"\nüí≥ CART√ÉO {cartao['numero']}")
        print(f"üí∞ Limite: R$ {cartao['limite']:.2f}")           # Limite total
        print(f"üí∏ Usado: R$ {cartao['usado']:.2f}")             # Quanto j√° gastou
        print(f"‚úÖ Dispon√≠vel: R$ {cartao['limite'] - cartao['usado']:.2f}")  # Quanto ainda pode gastar
        
        print("\n1. üõí Fazer compra")      # Comprar algo
        print("2. üßæ Ver fatura atual")    # Ver o que deve pagar
        print("3. üìÑ Gerar fatura PDF")    # Salvar fatura em arquivo
        print("4. üí∞ Pagar fatura")        # Pagar a conta do cart√£o
        print("5. üîô Voltar")              # Voltar para lista de cart√µes
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            # FAZER COMPRA - usar o cart√£o para comprar algo
            try:
                valor = float(input("üí∞ Valor da compra: R$ "))
                parcelas = int(input("üìÖ N√∫mero de parcelas (1-24): "))
                descricao = input("üìù Descri√ß√£o da compra: ")
                
                # Tenta fazer a compra
                if cartao_manager.fazer_compra(usuario, cartao['numero'], valor, parcelas, descricao):
                    pontos_ganhos = int(valor // 10)  # // = divis√£o inteira
                    usuario_manager.adicionar_pontos(usuario, pontos_ganhos)
                    
                    # Registra a compra no log
                    auditoria.log_acao(usuario, "COMPRA_CARTAO", 
                                     f"Compra de R$ {valor:.2f} em {parcelas}x no cart√£o {cartao['numero']}")
                    print(f"‚úÖ Compra realizada! Voc√™ ganhou {pontos_ganhos} pontos!")
            except ValueError:
                print("‚ùå Valor inv√°lido!")
            pausar()
        
        elif opcao == "2":
            # VER FATURA - mostra tudo que deve pagar
            cartao_manager.mostrar_fatura(usuario, cartao['numero'])
            pausar()
        
        elif opcao == "3":
            # GERAR PDF - cria arquivo PDF da fatura
            cartao_manager.gerar_fatura_pdf(usuario, cartao['numero'])
            pausar()
        
        elif opcao == "4":
            # PAGAR FATURA - paga a conta do cart√£o
            try:
                valor = float(input("üí∞ Valor do pagamento: R$ "))
                if cartao_manager.pagar_fatura(usuario, cartao['numero'], valor, usuario_manager):
                    auditoria.log_acao(usuario, "PAGAMENTO_FATURA", 
                                     f"Pagamento de R$ {valor:.2f} da fatura do cart√£o {cartao['numero']}")
                    print("‚úÖ Pagamento realizado!")
            except ValueError:
                print("‚ùå Valor inv√°lido!")
            pausar()
        
        elif opcao == "5":
            # VOLTAR - sai deste menu
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            pausar()

def trocar_pontos_por_saldo(usuario, usuario_manager, auditoria):
    """
    ‚≠ê SISTEMA DE TROCA DE PONTOS
    
    Esta fun√ß√£o permite que o usu√°rio troque seus pontos de recompensa
    por dinheiro real na conta. √â como um "programa de fidelidade".
    
    Taxa de convers√£o: 100 pontos = R$ 5,00
    """
    
    pontos = usuario_manager.get_pontos(usuario)
    print(f"\n‚≠ê Voc√™ tem {pontos} pontos")
    print("üí∞ Taxa de convers√£o: 100 pontos = R$ 5,00")
    
    # Se n√£o tem pontos suficientes para trocar
    if pontos < 100:
        print("‚ùå Voc√™ precisa de pelo menos 100 pontos para trocar!")
        pausar()
        return  # Sai da fun√ß√£o
    
    max_conversao = pontos // 100  # Quantos grupos de 100 pontos tem
    print(f"üîÑ Voc√™ pode converter at√© {max_conversao * 100} pontos (R$ {max_conversao * 5:.2f})")
    
    try:
        pontos_converter = int(input("Quantos pontos deseja converter? "))
        
        if pontos_converter % 100 != 0:  # Tem que ser m√∫ltiplo de 100
            print("‚ùå Voc√™ deve converter m√∫ltiplos de 100 pontos!")
            pausar()
            return
        
        if pontos_converter > pontos:  # N√£o pode converter mais do que tem
            print("‚ùå Voc√™ n√£o tem pontos suficientes!")
            pausar()
            return
        
        valor_saldo = (pontos_converter // 100) * 5  # Cada 100 pontos = R$ 5
        usuario_manager.remover_pontos(usuario, pontos_converter)  # Remove os pontos
        usuario_manager.depositar(usuario, valor_saldo)           # Adiciona o dinheiro
        
        # Registra a opera√ß√£o
        auditoria.log_acao(usuario, "TROCA_PONTOS", 
                         f"Converteu {pontos_converter} pontos em R$ {valor_saldo:.2f}")
        print(f"‚úÖ Convers√£o realizada! R$ {valor_saldo:.2f} adicionados ao seu saldo!")
        
    except ValueError:
        print("‚ùå Valor inv√°lido!")
    
    pausar()

def menu_investimentos(usuario, investimento_manager, usuario_manager, auditoria):
    """
    üìà MENU DE INVESTIMENTOS
    
    Esta fun√ß√£o √© como a "corretora" do banco.
    Aqui o usu√°rio pode aplicar dinheiro em diferentes tipos
    de investimento para fazer o dinheiro render.
    """
    
    while True:
        limpar_tela()
        print(f"\nüìà INVESTIMENTOS - {usuario}")
        
        investimentos = investimento_manager.get_investimentos_usuario(usuario)
        total_investido = sum(inv['valor_atual'] for inv in investimentos)  # Soma todos os investimentos
        
        print(f"üí∞ Total investido: R$ {total_investido:.2f}")
        
        print("\n1. üí∞ Nova aplica√ß√£o")        # Investir dinheiro
        print("2. üìä Ver investimentos")       # Ver aplica√ß√µes atuais
        print("3. üí∏ Resgatar investimento")   # Tirar dinheiro investido
        print("4. üîô Voltar")                  # Voltar ao menu anterior
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            # Chama fun√ß√£o espec√≠fica para nova aplica√ß√£o
            investimento_manager.nova_aplicacao(usuario, usuario_manager, auditoria)
        elif opcao == "2":
            # Mostra todos os investimentos do usu√°rio
            investimento_manager.mostrar_investimentos(usuario)
            pausar()
        elif opcao == "3":
            # Permite resgatar (tirar) dinheiro dos investimentos
            investimento_manager.resgatar_investimento(usuario, usuario_manager, auditoria)
        elif opcao == "4":
            break  # Volta ao menu anterior
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            pausar()

def menu_emprestimos(usuario, emprestimo_manager, usuario_manager, auditoria):
    """
    üíµ MENU DE EMPR√âSTIMOS
    
    Esta fun√ß√£o √© como o "setor de cr√©dito" do banco.
    Aqui o usu√°rio pode pedir dinheiro emprestado,
    ver suas d√≠vidas e fazer pagamentos.
    """
    
    while True:
        limpar_tela()
        print(f"\nüíµ EMPR√âSTIMOS - {usuario}")
        
        emprestimos = emprestimo_manager.get_emprestimos_usuario(usuario)
        total_divida = sum(emp['valor_atual'] for emp in emprestimos)  # Soma todas as d√≠vidas
        
        print(f"üí∏ Total em d√≠vida: R$ {total_divida:.2f}")
        
        print("\n1. üí∞ Solicitar empr√©stimo")   # Pedir dinheiro emprestado
        print("2. üìä Ver empr√©stimos")          # Ver d√≠vidas atuais
        print("3. üí∏ Pagar empr√©stimo")         # Pagar d√≠vidas
        print("4. üîô Voltar")                   # Voltar ao menu anterior
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            # Chama fun√ß√£o espec√≠fica para solicitar empr√©stimo
            emprestimo_manager.solicitar_emprestimo(usuario, usuario_manager, auditoria)
        elif opcao == "2":
            # Mostra todos os empr√©stimos do usu√°rio
            emprestimo_manager.mostrar_emprestimos(usuario)
            pausar()
        elif opcao == "3":
            # Permite pagar empr√©stimos
            emprestimo_manager.pagar_emprestimo(usuario, usuario_manager, auditoria)
        elif opcao == "4":
            break  # Volta ao menu anterior
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            pausar()

def pagamento_boletos(usuario, usuario_manager, auditoria):
    """
    üßæ PAGAMENTO DE BOLETOS
    
    Esta fun√ß√£o simula o pagamento de contas (luz, √°gua, telefone, etc.).
    O dinheiro √© debitado da conta do usu√°rio, como se fosse um saque
    para pagar uma conta externa.
    """
    
    limpar_tela()
    print(f"\nüßæ PAGAMENTO DE BOLETOS - {usuario}")
    
    try:
        valor = float(input("üí∞ Valor do boleto: R$ "))
        descricao = input("üìù Descri√ß√£o (ex: Conta de Luz): ")
        
        if usuario_manager.sacar(usuario, valor):
            # Adiciona no hist√≥rico como pagamento de boleto
            usuario_manager.adicionar_historico(usuario, f"BOLETO: {descricao} - R$ {valor:.2f}")
            # Registra no log de auditoria
            auditoria.log_acao(usuario, "PAGAMENTO_BOLETO", f"Pagamento de boleto: {descricao} - R$ {valor:.2f}")
            print("‚úÖ Boleto pago com sucesso!")
        else:
            print("‚ùå Saldo insuficiente!")
    
    except ValueError:
        # Se digitou um valor inv√°lido (n√£o num√©rico)
        print("‚ùå Valor inv√°lido!")
    
    pausar()

def menu_admin(admin_manager, usuario_manager, auditoria):
    """
    üîß MENU ADMINISTRATIVO
    
    Esta fun√ß√£o √© exclusiva para administradores do sistema.
    Aqui eles podem ver estat√≠sticas, gerar relat√≥rios,
    listar usu√°rios e verificar logs de seguran√ßa.
    
    √â como o "escrit√≥rio da ger√™ncia" do banco.
    """
    
    while True:
        limpar_tela()
        print("\nüîß PAINEL ADMINISTRATIVO")
        
        print("1. üë• Listar usu√°rios")         # Ver todos os usu√°rios cadastrados
        print("2. üìä Estat√≠sticas gerais")     # Ver n√∫meros do sistema
        print("3. üìÑ Gerar relat√≥rio CSV")     # Exportar dados em planilha
        print("4. üìã Gerar relat√≥rio PDF")     # Exportar relat√≥rio em PDF
        print("5. üìù Ver logs de auditoria")   # Ver logs de seguran√ßa
        print("6. üö™ Sair")                    # Sair do painel admin
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            # Lista todos os usu√°rios do sistema
            admin_manager.listar_usuarios(usuario_manager)
            pausar()
        elif opcao == "2":
            # Mostra estat√≠sticas gerais do sistema
            admin_manager.mostrar_estatisticas(usuario_manager)
            pausar()
        elif opcao == "3":
            # Gera relat√≥rio em formato CSV (planilha)
            admin_manager.gerar_relatorio_csv(usuario_manager)
            pausar()
        elif opcao == "4":
            # Gera relat√≥rio em formato PDF
            admin_manager.gerar_relatorio_pdf(usuario_manager)
            pausar()
        elif opcao == "5":
            # Mostra todos os logs de auditoria (seguran√ßa)
            auditoria.mostrar_logs()
            pausar()
        elif opcao == "6":
            break  # Sai do painel administrativo
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            pausar()

# ============================================================================
# EXECU√á√ÉO PRINCIPAL
# ============================================================================

# Esta linha verifica se o arquivo est√° sendo executado diretamente
# (n√£o se for importado como m√≥dulo)
if __name__ == "__main__":
    main()  # Chama a fun√ß√£o principal para iniciar o sistema
